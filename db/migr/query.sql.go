// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package migr

import (
	"context"
)

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, bio, latitude, longitude, updated_at FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Bio,
		&i.Latitude,
		&i.Longitude,
		&i.UpdatedAt,
	)
	return i, err
}

const insertMatch = `-- name: InsertMatch :exec
INSERT INTO matches (user_id_1, user_id_2)
VALUES (?, ?)
`

type InsertMatchParams struct {
	UserID1 int64
	UserID2 int64
}

func (q *Queries) InsertMatch(ctx context.Context, arg InsertMatchParams) error {
	_, err := q.db.ExecContext(ctx, insertMatch, arg.UserID1, arg.UserID2)
	return err
}

const insertSwipe = `-- name: InsertSwipe :exec
INSERT INTO swipes (user_swiped, user_swiped_on, swipe_type)
VALUES (?, ?, ?)
`

type InsertSwipeParams struct {
	UserSwiped   int64
	UserSwipedOn int64
	SwipeType    SwipesSwipeType
}

func (q *Queries) InsertSwipe(ctx context.Context, arg InsertSwipeParams) error {
	_, err := q.db.ExecContext(ctx, insertSwipe, arg.UserSwiped, arg.UserSwipedOn, arg.SwipeType)
	return err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (first_name, last_name, bio, latitude, longitude)
VALUES (?, ?, ?, ?, ?)
`

type InsertUserParams struct {
	FirstName string
	LastName  string
	Bio       string
	Latitude  string
	Longitude string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.FirstName,
		arg.LastName,
		arg.Bio,
		arg.Latitude,
		arg.Longitude,
	)
	return err
}
