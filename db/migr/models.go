// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package migr

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type SwipesSwipeType string

const (
	SwipesSwipeTypeLeft  SwipesSwipeType = "left"
	SwipesSwipeTypeRight SwipesSwipeType = "right"
)

func (e *SwipesSwipeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SwipesSwipeType(s)
	case string:
		*e = SwipesSwipeType(s)
	default:
		return fmt.Errorf("unsupported scan type for SwipesSwipeType: %T", src)
	}
	return nil
}

type NullSwipesSwipeType struct {
	SwipesSwipeType SwipesSwipeType
	Valid           bool // Valid is true if SwipesSwipeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSwipesSwipeType) Scan(value interface{}) error {
	if value == nil {
		ns.SwipesSwipeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SwipesSwipeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSwipesSwipeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SwipesSwipeType), nil
}

type Match struct {
	ID      int64
	UserID1 int64
	UserID2 int64
}

type Swipe struct {
	ID           int64
	UserSwiped   int64
	UserSwipedOn int64
	SwipeType    SwipesSwipeType
}

type User struct {
	ID        int64
	FirstName string
	LastName  string
	Bio       string
	Latitude  string
	Longitude string
	UpdatedAt sql.NullTime
}
